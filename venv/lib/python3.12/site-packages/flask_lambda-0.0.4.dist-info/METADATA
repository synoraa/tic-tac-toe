Metadata-Version: 2.0
Name: flask-lambda
Version: 0.0.4
Summary: Python module to make Flask compatible with AWS Lambda for creating RESTful applications
Home-page: https://github.com/sivel/flask-lambda
Author: Matt Martz
Author-email: matt@sivel.net
License: Apache License, Version 2.0
Keywords: flask aws amazon lambda
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Classifier: Environment :: Console
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: Apache Software License
Requires-Dist: Flask (>=0.10)

flask-lambda
============

Python module to make Flask compatible with AWS Lambda for creating RESTful applications.

Installation
------------

::

    pip install flask-lambda

Usage
-----

This module works pretty much just like Flask. This allows you to run and develop this applicaiton locally just like you would in Flask.  When ready deploy to Lambda, and configure the handler as::

    my_python_file.app

Here is an example of what ``my_python_file.py`` would look like::

    from flask_lambda import FlaskLambda

    app = FlaskLambda(__name__)

    @app.route('/foo', methods=['GET', 'POST'])
    def foo():
        data = {
            'form': request.form.copy(),
            'args': request.args.copy(),
            'json': request.json
        }
        return (
            json.dumps(data, indent=4, sort_keys=True),
            200,
            {'Content-Type': 'application/json'}
        )


    if __name__ == '__main__':
        app.run(debug=True)

Flask-RESTful
-------------

Nothing special here, this module works without issue with Flask-RESTful as well.

API Gateway
-----------

Configure your API Gateway with a ``{proxy+}`` resource with an ``ANY`` method. Your "Method Response" should likely include an ``application/json`` "Response Body for 200" that uses the ``Empty`` model.

Deploying
---------

Consider using `python-mu <https://github.com/sivel/mu>`_.


